import os
import warnings
from typing import Dict
from nlp import get_response

from openfabric_pysdk.utility import SchemaUtil

from ontology_dc8f06af066e4a7880a5938933236037.simple_text import SimpleText

from openfabric_pysdk.context import Ray, State
from openfabric_pysdk.loader import ConfigClass


############################################################
# Callback function called on update config
############################################################
def config(configuration: Dict[str, ConfigClass], state: State):
    # TODO Add code here
    pass


############################################################
# Callback function called on each execution pass
############################################################


def execute(request: SimpleText, ray: Ray, state: State) -> SimpleText:
    """
    Processes a request containing text and returns a response using a question-answering model.

    This function takes a request object containing one or more pieces of text, utilizes a
    question-answering model to generate responses for each text, and returns the responses
    in a structured format compatible with the OpenFabric platform.

    Parameters:
        request (SimpleText): An object that includes a list of text items for processing.
        ray (Ray): An object representing the current context or execution environment.
                   It is part of the OpenFabric SDK and can be used to access additional
                   information about the request or maintain state across function calls.
        state (State): An object representing the current state of the execution. It can be
                       used to store data that persists across multiple executions.

    Returns:
        SimpleText: An object containing the list of responses generated by the model for
                    each input text item.

    Usage:
        # Assuming an initialized OpenFabric environment with SimpleText, Ray, and State objects
        response = execute(request, ray, state)
        print(response.text)  # The 'text' attribute contains the list of responses.

    Note:
        The function uses the `get_response` function to process each text item, which should
        be defined elsewhere in the codebase. The `get_response` function is responsible for
        querying a question-answering model and returning the generated response.
    """
    output = []
    for text in request.text:        
        response = get_response(text)
        output.append(response)

    return SchemaUtil.create(SimpleText(), dict(text=output))
